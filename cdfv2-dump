#!/usr/bin/env perl
use warnings;
use strict;
#
# Quick and dirty dumper for the CDFv2 file format
#

package Sector::FH;
use warnings;
use strict;
#
# Provide a sector interface to a filehandle
# filepos = $offset + sector*$sector_size

sub new {
    my $class = shift;
    my $self = {};
    bless $self, $class;

    $self->{fh} = shift || return undef;
    $self->{start_offset} = shift || return undef;
    $self->{sector_size} = (shift)+0 || return undef;

    return $self;
}

sub read {
    my $self = shift;
    my $sector = shift;

    my $buf;
    my $size = $self->{sector_size};
    my $filepos = $self->{start_offset} + $sector * $size;
    $self->{fh}->seek($filepos,0) || return undef;
    $self->{fh}->read($buf,$size) || return undef;
    return $buf;
}

sub max_sector {
    my $self = shift;

    $self->{fh}->seek(0,2) || return undef;
    my $filesize = $self->{fh}->tell();

    my $sector_size = $self->{sector_size};

    return int((($filesize-1)+$sector_size)/$sector_size);
}

package Sector::SectorList;
use warnings;
use strict;
#
# Provide a sector interface to a list of sectors in an underlying Sector object

sub new {
    my $class = shift;
    my $self = {};
    bless $self, $class;

    $self->{sector_size} = shift || return undef;
    $self->{sector} = shift || return undef;
    $self->{list} = shift || return undef;

    return $self;
}

sub read {
    my $self = shift;
    my $sector = shift;

    my $size = $self->{sector_size};
    my $parent_size = $self->{sector}{sector_size};
    my $parent_sector = int($sector*$size / $parent_size);
    my $parent_offset = $sector*$size % $parent_size;

    # lookup the correct sector from the list
    $parent_sector = $self->{list}[$parent_sector];
    if (!defined($parent_sector)) {
        return undef;
    }

    my $buf = $self->{sector}->read($parent_sector) || return undef;
    return substr($buf,$parent_offset,$size);
}

sub max_sector {
    my $self = shift;

    my $sector_size = $self->{sector_size};
    my $parent_bytes = $self->{sector}{sector_size}*scalar(@{$self->{list}});

    my $max_sector = int((($parent_bytes-1)+$sector_size)/$sector_size);

    return $max_sector;
}

sub readall {
    my $self = shift;

    my $buf;
    my $count = $self->max_sector();
    for my $secno (0..$count-1) {
        $buf .= $self->read($secno);
    }
    return $buf;
}

package CDF_File;
use warnings;
use strict;

use IO::File;
use UUID ':all';
use Encode qw(decode encode);


sub new {
    my $class = shift;
    my $self = {};
    bless $self, $class;

    my $filename = shift;
    $self->_open($filename) || return undef;
    $self->_validate() || return undef;
    $self->_read_sat() || return undef;
    $self->_read_minifat() || return undef;
    $self->_read_dir() || return undef;

    return $self;
}

sub _open {
    my $self = shift;
    my $filename = shift;

    my $fh = IO::File->new($filename,"r");
    return undef if (!defined($fh));
    $self->{fh} = $fh;
    return $self;
}


# turn an int into a hex
sub hexify { return sprintf("0x%02x",shift); }

sub _validate {
    my $self = shift;
    my $buf;

    $self->{fh}->read($buf,512) || return undef;

    my $header;

    my @fields = qw(Sig _clsid MinorVersion DllVersion ByteOrder
        SectorShift MiniSectorShift Reserved Reserved1 sectDirCount
        sectFatCount sectDirStart _signature MiniSectorCutoff
        sectMiniFatStart sectMiniFatCount sectDifStart sectDifCount
        sectFat
    );
    my @values = unpack("Q>a16vvvvvvVVVVVVVVVVa*",$buf);
    map { $header->{$fields[$_]} = $values[$_] } (0..scalar(@fields)-1);
    $self->{header} = $header;

    my @sectors = unpack("V".$header->{sectFatCount},$header->{sectFat});
    $header->{sectFat} = \@sectors;

    $header->{Sig} = hexify($header->{Sig});
    $header->{ByteOrder} = hexify($header->{ByteOrder});
    unparse($header->{_clsid},$header->{_clsid});

    $header->{Sig} eq '0xd0cf11e0a1b11ae1' || die("Bad Sig");
    $header->{ByteOrder} eq '0xfffe' || die("Unsupported Byteorder");
    $header->{DllVersion} == 3 || die("Unsupported Version");
    $header->{sectDirCount} == 0 || die("sectDirCount MBZ");
    $header->{sectDifCount} == 0 || die("Unsupported sectDifCount");
    $header->{sectDifStart} == 0xFFFFFFFE || die("Unsupported larger Dif");

    my $sector_size = 2**$header->{SectorShift};
    $self->{_sector} = Sector::FH->new($self->{fh},512,$sector_size);

    return $self;
}

sub _read_sat {
    my $self = shift;
    my $sat;

    for my $secno (@{$self->{header}{sectFat}}) {
        $sat .= $self->{_sector}->read($secno);
    }
    my @sat = unpack('V*',$sat);

    $self->{_sat} = _unpack_chains(@sat);

    return $self;
}

sub _unpack_chains {
    my @cluster_raw = @_;

    my @prev;   # back-chain list ref
    my %tails;  # list of seen ending sectors
    my $cluster; # place to accumulate the table of chains
    my @visited; # list of sectors added to cluster

    my $errors = 0;
    for my $sector (0..scalar(@cluster_raw)-1) {
        my $next = $cluster_raw[$sector];

        if ($next < 0xfffffffc) {
            if (defined($prev[$next])) {
                $errors++;
            } else {
                $prev[$next] = $sector;
            }
        } elsif ($next == 0xfffffffe) {
            # keep track of all the ends we found
            $tails{$sector}++;
        } elsif ($next == 0xffffffff) {
            push @{$cluster->{FREESECT}},$sector;
            $visited[$sector]++;
        } elsif ($next == 0xfffffffd) {
            push @{$cluster->{FATSECT}},$sector;
            $visited[$sector]++;
        } elsif ($next == 0xfffffffc) {
            push @{$cluster->{DIFSECT}},$sector;
            $visited[$sector]++;
        }
    }

    for my $tail (keys(%tails)) {
        my @this = $tail+0;
        $visited[$tail]++;
        my $sector = $tail;
        while (defined($prev[$sector])) {
            $sector = $prev[$sector];
            unshift @this,$sector;
            $visited[$sector]++;
        }
        $cluster->{$sector} = \@this;
    }

    for my $sector (0..scalar(@cluster_raw)-1) {
        if (!$visited[$sector]) {
            $errors++;
            push @{$cluster->{UNVISITED}}, $sector;
        }
    }

    if ($errors) {
        warn("Errors found checking cluster chain");
    }

    return $cluster;
}

sub _read_satchain {
    my $self = shift;
    my $sector_list = shift;
    my $expected_sectors = shift;

    if ($expected_sectors && $expected_sectors != scalar(@{$sector_list})) {
        die("Unexpected size");
    }

    my $sector_size = $self->{_sector}{sector_size};
    my $sector = Sector::SectorList->new($sector_size,$self->{_sector},$sector_list);

    return $sector->readall();
}

sub _read_minifat {
    my $self = shift;
    my $startsec = $self->{header}{sectMiniFatStart};
    my $expected_sectors = $self->{header}{sectMiniFatCount};
    my $raw = $self->_read_satchain($self->{_sat}{$startsec},$expected_sectors);

    my @minifat = unpack('V*',$raw);
    $self->{_minifat} = _unpack_chains(@minifat);
    return $self;
}

sub _read_dir {
    my $self = shift;
    my $startsec = $self->{header}{sectDirStart};
    my $expected_sectors = $self->{header}{sectDirCount};
    my $raw = $self->_read_satchain($self->{_sat}{$startsec},$expected_sectors);

    my $dir = {};
    for my $dirid (0..length($raw)/128-1) {
        my $buf = substr($raw,$dirid*128,128);
        my $entry;

        my @fields = qw(name namelen type color
            dirid_left dirid_right dirid_root
            uuid flags
            time_create time_modify
            sector size unused
        );
        my @values = unpack("a64vCCVVVa16VQ>Q>VVV",$buf);
        map { $entry->{$fields[$_]} = $values[$_] } (0..scalar(@fields)-1);

        $entry->{name} = substr($entry->{name},0,$entry->{namelen}-2);
        $entry->{name} = decode('UTF-16LE',$entry->{name});

             if ($entry->{color} == 0) { $entry->{color} = 'red';
        } elsif ($entry->{color} == 1) { $entry->{color} = 'black';
        } else { die("bad dir entry color"); }

             if ($entry->{type} == 0) { $entry->{type} = 'empty';
        } elsif ($entry->{type} == 1) { $entry->{type} = 'user storage';
        } elsif ($entry->{type} == 2) { $entry->{type} = 'user stream';
        } elsif ($entry->{type} == 3) { $entry->{type} = 'lockbytes';
        } elsif ($entry->{type} == 4) { $entry->{type} = 'property';
        } elsif ($entry->{type} == 5) { $entry->{type} = 'root storage';
        } else { die("bad dir entry type"); }

        #unparse($entry->{uuid},$entry->{uuid});
        $self->{dir}{$dirid} = $entry;

        if ($entry->{type} eq 'root storage') {
            my $mini_sector_size = 2**$self->{header}{MiniSectorShift};
            $self->{_sector_mini} = Sector::SectorList->new(
                $mini_sector_size,      
                $self->{_sector},
                $self->{_sat}{$entry->{sector}}
            );
        } else {
            my $sector;
            my $sat;
            if ($entry->{size} < $self->{header}{MiniSectorCutoff}) {
                $sector = $self->{_sector_mini};
                $sat = $self->{_minifat};
            } else {
                $sector = $self->{_sector};
                $sat = $self->{_sat};
            }
            $entry->{file_sector} = Sector::SectorList->new(
                512,
                $sector,
                $sat->{$entry->{sector}}
            );

            #$entry->{file_data} = $entry->{file_sector}->readall();
        }
    }

    return $self;
}

package main;
use warnings;
use strict;

# allow the libs to be in the bin dir
use FindBin;
use lib "$FindBin::RealBin/lib";

use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Quotekeys = 0;


use HC::Common;

my $option = {
    verbose  => 0,
};
my @option_list = (
    "verbose|v+",
);

sub main() {
    HC::Common::do_options($option,@option_list);
    if (defined($option->{help})) {
        return
    }
    my $file = CDF_File->new($ARGV[0]);
    print Dumper($file);
}
main();
